spring:
  application:
    name: xmutca-incubator-gateway

  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848
      config:
        serverAddr: localhost:8848
        file-extension: yml
    gateway:
      routes:
        - id: xmutca-incubator-example-consumer-consumer
          # lb代表从注册中心获取服务，且已负载均衡方式转发
          uri: lb://xmutca-incubator-example-consumer
          predicates:
            - Path=/consumer/consumer, /hello/consumer
            - Method=GET
          filters:
            - StripPrefix=1

        - id: xmutca-incubator-example-consumer-test-id
          # lb代表从注册中心获取服务，且已负载均衡方式转发
          uri: lb://xmutca-incubator-example-consumer
          predicates:
            - Path=/consumer/test/{segment}
            - Method=GET
          filters:
            - LoginStatus
            - name: Authorize
              args:
                authorize_code: test
            - StripPrefix=1

        - id: xmutca-incubator-example-consumer-test
          # lb代表从注册中心获取服务，且已负载均衡方式转发
          uri: lb://xmutca-incubator-example-consumer
          predicates:
            - Path=/consumer/test
            - Method=GET
          filters:
            - StripPrefix=1

        - id: xmutca-incubator-sso
          # lb代表从注册中心获取服务，且已负载均衡方式转发
          uri: lb://xmutca-incubator-passport
          predicates:
            - Path=/passport/**
          filters:
            - StripPrefix=1

        - id: xmutca-incubator-example-provider
          uri: lb://xmutca-incubator-example-provider
          predicates:
            - Path=/provider/**, /providers/**
          filters:
            # 加上StripPrefix=1，否则转发到后端服务时会带上consumer前缀
            - StripPrefix=1
            - name: RateLimiter
              args:
                key-resolver: '#{@limiterKeyResolver}' #用于限流的键的解析器的 Bean 对象的名字。它使用 SpEL 表达式根据#{@beanName}从 Spring 容器中获取 Bean 对象
                redis-rate-limiter.replenishRate: 1 #令牌桶填充速率（其实也就是希望用户平均每秒执行多少请求。但是令牌桶优点是允许瞬间的激增请求）
                redis-rate-limiter.burstCapacity: 2 #令牌桶总容量。
#        - id: default_path_404 # 默认配置地址，404地址
#          uri: http://www.baidu.com
#          order: 10000
#          predicates:
#            - Path=/**
#          filters:
#            - SetPath=/
      default-filters:
        - RequestLogger
        - name: Hystrix
          args:
            name: default # 配置的这个名字，必须要和一一对应，否则不会生效：hystrix.command.[hystirx filter 的name].execution.isolation.thread.timeoutInMilliseconds
            fallbackUri: forward:/error/fallback
        - name: Retry
          args:
            retries: 3
            statuses: REQUEST_TIMEOUT, BAD_GATEWAY
            methods: GET, DELETE, PUT #只有幂等的才允许重试
      loadbalancer:
        use404: true # 意思是如果服务不存在，默认返回的是503，此功能开关代表返回的是404
  redis:
    host: localhost
    port: 6379



# hystrix 信号量隔离，10秒后自动超时
hystrix:
  command:
    default:
      execution:
        isolation:
          strategy: THREAD
          thread:
            timeoutInMilliseconds: 10000
